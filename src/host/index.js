import os from 'os';
import upath from 'upath';
import appGlobal from '../global';

/*
    Creative Suite Extendscript Interface / Decorator
*/
class Host 
{
    constructor() 
    {
        /**
         * To reduce coupling with GUI, don't use this raw interface in Vue components
         */
        this.interface = new CSInterface();
        this._initialized = false;
        this._scriptListenerIsActive = false;
    }
    init() 
    {
        if(this._initialized) return;
        this._initialized = true;

        // Host Environment Setup
        this.importScript("utils.jsx");
        this.importScript("polyfil.jsx");
        this.importScript("image.jsx"); 
        
        // Listeners
        this.interface.addEventListener("log", event => {
            console.log("Jsx Event: " + event.data);
        });

        // ScriptListener Setup
        this.initScriptListener();

        const apiVersion = this.interface.getCurrentApiVersion();
        console.log(`Host initialized.\n
            Install Path: ${appGlobal.appInstallPath}\n
            Working Path: ${appGlobal.appWorkingPath}\n
            Default Log Path: ${appGlobal.appDefaultLogPath}\n
            Builtin Action Path: ${appGlobal.appBuiltinActionsPath}\n
            Creative Suite API Version: ${apiVersion.major}.${apiVersion.minor}.${apiVersion.micro}\n
            OS: ${this.interface.getOSInformation()}`);
    }
    close()
    {
        // Cleanup
    }
    dispatchEvent(eventName, data) 
    {
        const scope = "APPLICATION";
        const event = new CSEvent(eventName, scope);
              event.data = data;
        this.interface.dispatchEvent(event);
    }
    /*---------------------
        Extend Script
    ---------------------*/
    // ActionReference is what to perform the action on within Photoshop  (e.g. document, marque tool, etc)
    // The Action Manager system keeps track of a large number of Descriptors keys relative to the status of:
    // - The Application
    // - Documents
    // - Layers
    // - Channels
    // - Paths
    // - History
    // - ActionSets and Actions 

    /**
     * Evaluate ExtendScript/JSX script on Host
     * @param {string} script 
     * @returns {Promise}
     */
    runJsx(script) 
    {
        return new Promise(resolve => {
            this.interface.evalScript(script, result => {
                resolve(result);
            })
        });
    }
    /**
     * Run the ExtendScript action function by the given name
     * @param {string} actionName 
     * @param {number|string|boolean|object|array} parameters 
     * @returns {Promise}
     */
    runActionWithParameters(actionName, parameters)
    {
        const parametersJson = JSON.stringify(parameters);
        return this.runJsx(`(function(){
            try {
                var result = ${actionName}(${parametersJson});
                return result;
            } catch(e) {
                return e.toString();
            }
        }())`);
    }
    /*---------------------
        Script Listener
    ---------------------*/
    initScriptListener()
    {
        // Determine if ScriptListener is on 
        // Folder.desktop
        const listenerLogsPath =  upath.join(os.homedir(), "Desktop", "ScriptingListenerJS.log");
        const scriptWatcher = chokidar.watch(listenerLogsPath, {
            awaitWriteFinish: {
                pollInterval: 100,
                stabilityThreshold: 2000
            }
        });
        scriptWatcher.on("change", debounce(this.readScriptListenerLog, 1000));
        //...
        scriptWatcher.removeAllListeners();
        scriptWatcher.close();
        //...
        
    }
    clearScriptListenerLogs() 
    {
        fs.writeFile(SCRIPT_LOG_PATH, "", err => {
            if(err) throw err; 
        });
    }
    onScriptListenerLogs() 
    {
        // IMPORTANT: Somme commands generated by ScriptListenerPlugin will not run via evalScript.
        // In particular, modal commands, such as "modalStateChanged" will throw an error
        // fs.readFile(path, (err, data) => {
        //     if(err) throw err; 

        //     this.jsxText = data.toString();
        // });
    }
    async importScript(fileName) 
    {
        const importPath = upath.join(appGlobal.appWorkingPath, fileName);
        const result = await this.runJsx(`importJsx("${importPath}");`);
        console.log("Jsx File Imported: " + importPath + " Result: " + result);
    }
    /**
     * Converts an Action Manager charId to a stringId
     * Returns empty string if error occurred.
     * @param {string} charId 
     */
    async convertCharToStringId(charId) {
        return this.runJsx(`t2s(c2t('${charId}'))`)
        .then(result => {
            if(result.includes("error")) {
                return "";
            }
        });
    }
    /**
     * Converts an Action Manager stringId to a charId
     * Returns empty string if error occurred.
     * @param {string} charId 
     */
    async convertStringToCharId(stringId) {
        return this.runJsx(`t2c(s2t('${stringId}'))`)
        .then(result => {
            if(result.includes("error")) {
                return "";
            }
        });
    }
    async isScriptListenerIstalled()
    {
        return this.runActionWithParameters("action.getIsScriptListenerInstalled")
        .then(result => Boolean(result));
    }
    async toggleScriptListener(active)
    {
        return this.runActionWithParameters("action.setScriptListenerActive", active);
    }
}

export default new Host();